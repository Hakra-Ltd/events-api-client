# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventSchema(BaseModel):
    """
    EventSchema
    """ # noqa: E501
    id: StrictStr
    event_id: StrictStr
    venue_id: StrictStr
    event_name: StrictStr
    venue_name: Optional[StrictStr]
    city: Optional[StrictStr]
    state: Optional[StrictStr]
    url: Optional[StrictStr]
    country: Optional[StrictStr]
    date_time: Optional[datetime]
    timezone_date_time: Optional[datetime]
    keywords: Optional[StrictStr]
    performer_name: Optional[StrictStr]
    exchange: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["id", "event_id", "venue_id", "event_name", "venue_name", "city", "state", "url", "country", "date_time", "timezone_date_time", "keywords", "performer_name", "exchange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if venue_name (nullable) is None
        # and model_fields_set contains the field
        if self.venue_name is None and "venue_name" in self.model_fields_set:
            _dict['venue_name'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if date_time (nullable) is None
        # and model_fields_set contains the field
        if self.date_time is None and "date_time" in self.model_fields_set:
            _dict['date_time'] = None

        # set to None if timezone_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.timezone_date_time is None and "timezone_date_time" in self.model_fields_set:
            _dict['timezone_date_time'] = None

        # set to None if keywords (nullable) is None
        # and model_fields_set contains the field
        if self.keywords is None and "keywords" in self.model_fields_set:
            _dict['keywords'] = None

        # set to None if performer_name (nullable) is None
        # and model_fields_set contains the field
        if self.performer_name is None and "performer_name" in self.model_fields_set:
            _dict['performer_name'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "event_id": obj.get("event_id"),
            "venue_id": obj.get("venue_id"),
            "event_name": obj.get("event_name"),
            "venue_name": obj.get("venue_name"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "url": obj.get("url"),
            "country": obj.get("country"),
            "date_time": obj.get("date_time"),
            "timezone_date_time": obj.get("timezone_date_time"),
            "keywords": obj.get("keywords"),
            "performer_name": obj.get("performer_name"),
            "exchange": obj.get("exchange")
        })
        return _obj


